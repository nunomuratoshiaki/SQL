AWSTemplateFormatVersion: 2010-09-09
Description: Step Function Create

Parameters:
  LambdaHumanApprovalSendEmailFunction:
    Type: String

  RestAPI:
    Type: String

  LambdaAccountCreationFunction:
    Type: String

  LambdaStateMachineExecutionRole:
    Type: String

Resources:

#Cloud Watch Log Group Create
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: StateMachinLogGroup

# Step Function Create
  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - LogGroup
    Properties:
      RoleArn: !Ref LambdaStateMachineExecutionRole
      StateMachineName: AccountCreation
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt LogGroup.Arn
      DefinitionString:
        Fn::Sub: |
          {
            "StartAt": "Lambda Callback",
            "States": {
              "Lambda Callback": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                "Parameters": {
                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction}",
                  "Payload": {
                    "ExecutionContext.$": "$$",
                    "APIGatewayEndpoint": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/states"
                  }
                },
                "Next": "ManualApprovalChoiceState"
              },
              "ManualApprovalChoiceState": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.StatusMsg",
                    "StringMatches": "Approved*",
                    "Next": "ApprovedPassState"
                  },
                  {
                    "Variable": "$.StatusMsg",
                    "StringMatches": "Rejected*",
                    "Next": "RejectedPassState"
                  }
                ],
                "Default": "UnexpectedPassState"
              },
              "UnexpectedPassState": {
                "Type": "Fail",
                "Comment": "LambdaHumanApprovalSendEmailFunct"
              },
              "ApprovedPassState": {
                "Type": "Pass",
                "Next": "ValidationRequest"
              },
              "ValidationRequest": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                "Parameters": {
                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction}",
                  "Payload": {
                    "ExecutionContext.$": "$$",
                    "APIGatewayEndpoint": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/states"
                  }
                },
                "Next": "ManualValidateChoiceState",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "Next": "ApprovedPassState",
                    "ResultPath": "$.LambdaOutput"
                  },
                  {
                    "ErrorEquals": [
                      "States.Timeout"
                    ],
                    "Next": "UnexpectedPassState"
                  }
                ],
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.Timeout"
                    ],
                    "BackoffRate": 1,
                    "IntervalSeconds": 1,
                    "MaxAttempts": 99
                  }
                ],
                "TimeoutSeconds": 300
              },
              "ManualValidateChoiceState": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.StatusMsg",
                    "StringMatches": "Validated*",
                    "Next": "CreateAccount"
                  }
                ]
              },
              "CreateAccount": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                "Parameters": {
                  "FunctionName": "${LambdaAccountCreationFunction}",
                  "Payload": {
                    "ExecutionContext.$": "$$"
                  }
                },
                "Next": "CreateAccountSuccessNotice",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "Next": "TaskFailedDetailChoiceState",
                    "ResultPath": "$.TaskFailedDetail"
                  }
                ]
              },
              "TaskFailedDetailChoiceState": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.TaskFailedDetail.Cause",
                    "StringEquals": "EMAIL_ALREADY_EXISTS",
                    "Next": "EmailChangeRequest"
                  }
                ],
                "Default": "CreateAccountFailureNotice"
              },
              "EmailChangeRequest": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction}",
                  "Payload": {
                    "ExecutionContext.$": "$$",
                    "LambdaOutput.$": "$"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              },
              "CreateAccountFailureNotice": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction}:$LATEST",
                  "Payload": {
                    "ExecutionContext.$": "$$",
                    "LambdaOutput.$": "$"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              },
              "CreateAccountSuccessNotice": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaHumanApprovalSendEmailFunction}",
                  "Payload": {
                    "ExecutionContext.$": "$$",
                    "LambdaOutput.$": "$"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              },
              "RejectedPassState": {
                "Type": "Pass",
                "End": true
              }
            }
          }

Outputs:
  StateMachineHumanApproval:
    Value: !Ref StepFunction
    Export:
      Name: StateMachineHumanApproval